{"uid":"a8562642b5f6bba6","name":"updateAuthorDetailsSuccessfully()","fullName":"com.bookstore.api.tests.AuthorApiTest.updateAuthorDetailsSuccessfully","historyId":"b3ee12dc0af1d2aa43964668038747d","time":{"start":1745309012472,"stop":1745309014046,"duration":1574},"description":"","status":"failed","statusMessage":"[Author details with ID 176 was not updated correctly] \nexpected: AuthorDTO(id=176, idBook=12, firstName=null, lastName=null)\n but was: AuthorDTO(id=176, idBook=60, firstName=First Name 176, lastName=Last Name 176)","statusTrace":"org.opentest4j.AssertionFailedError: [Author details with ID 176 was not updated correctly] \nexpected: AuthorDTO(id=176, idBook=12, firstName=null, lastName=null)\n but was: AuthorDTO(id=176, idBook=60, firstName=First Name 176, lastName=Last Name 176)\n\tat com.bookstore.api.tests.AuthorApiTest.updateAuthorDetailsSuccessfully(AuthorApiTest.java:152)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:580)\n\tat java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)\n\tat java.base/java.util.concurrent.ForkJoinPool$WorkQueue.tryRemoveAndExec(ForkJoinPool.java:1351)\n\tat java.base/java.util.concurrent.ForkJoinTask.awaitDone(ForkJoinTask.java:422)\n\tat java.base/java.util.concurrent.ForkJoinTask.join(ForkJoinTask.java:651)\n\tat java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)\n\tat java.base/java.util.concurrent.ForkJoinPool$WorkQueue.tryRemoveAndExec(ForkJoinPool.java:1351)\n\tat java.base/java.util.concurrent.ForkJoinTask.awaitDone(ForkJoinTask.java:422)\n\tat java.base/java.util.concurrent.ForkJoinTask.join(ForkJoinTask.java:651)\n\tat java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)\n\tat java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1312)\n\tat java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1843)\n\tat java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1808)\n\tat java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:188)\n","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"testStage":{"description":"","status":"failed","statusMessage":"[Author details with ID 176 was not updated correctly] \nexpected: AuthorDTO(id=176, idBook=12, firstName=null, lastName=null)\n but was: AuthorDTO(id=176, idBook=60, firstName=First Name 176, lastName=Last Name 176)","statusTrace":"org.opentest4j.AssertionFailedError: [Author details with ID 176 was not updated correctly] \nexpected: AuthorDTO(id=176, idBook=12, firstName=null, lastName=null)\n but was: AuthorDTO(id=176, idBook=60, firstName=First Name 176, lastName=Last Name 176)\n\tat com.bookstore.api.tests.AuthorApiTest.updateAuthorDetailsSuccessfully(AuthorApiTest.java:152)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:580)\n\tat java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)\n\tat java.base/java.util.concurrent.ForkJoinPool$WorkQueue.tryRemoveAndExec(ForkJoinPool.java:1351)\n\tat java.base/java.util.concurrent.ForkJoinTask.awaitDone(ForkJoinTask.java:422)\n\tat java.base/java.util.concurrent.ForkJoinTask.join(ForkJoinTask.java:651)\n\tat java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)\n\tat java.base/java.util.concurrent.ForkJoinPool$WorkQueue.tryRemoveAndExec(ForkJoinPool.java:1351)\n\tat java.base/java.util.concurrent.ForkJoinTask.awaitDone(ForkJoinTask.java:422)\n\tat java.base/java.util.concurrent.ForkJoinTask.join(ForkJoinTask.java:651)\n\tat java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)\n\tat java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1312)\n\tat java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1843)\n\tat java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1808)\n\tat java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:188)\n","steps":[{"name":"Get authors list","time":{"start":1745309012472,"stop":1745309013146,"duration":674},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Update author details","time":{"start":1745309013146,"stop":1745309013595,"duration":449},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"authorId","value":"176"},{"name":"authorDTO","value":"AuthorDTO(id=176, idBook=12, firstName=null, lastName=null)"}],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},{"name":"Get specific author by ID","time":{"start":1745309013595,"stop":1745309014045,"duration":450},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"authorId","value":"176"}],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":3,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"junit.platform.uniqueid","value":"[engine:junit-jupiter]/[class:com.bookstore.api.tests.AuthorApiTest]/[method:updateAuthorDetailsSuccessfully()]"},{"name":"host","value":"fv-az791-674"},{"name":"thread","value":"2065@fv-az791-674.ForkJoinPool-3-worker-1(44)"},{"name":"framework","value":"junit-platform"},{"name":"language","value":"java"},{"name":"package","value":"com.bookstore.api.tests.AuthorApiTest"},{"name":"testClass","value":"com.bookstore.api.tests.AuthorApiTest"},{"name":"testMethod","value":"updateAuthorDetailsSuccessfully"},{"name":"suite","value":"com.bookstore.api.tests.AuthorApiTest"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"9ac36389d2cac188","status":"failed","statusDetails":"[Author details with ID 336 was not updated correctly] \nexpected: AuthorDTO(id=336, idBook=11, firstName=null, lastName=null)\n but was: AuthorDTO(id=336, idBook=110, firstName=First Name 336, lastName=Last Name 336)","time":{"start":1745309007739,"stop":1745309009357,"duration":1618}},{"uid":"5ddf324710a30f7d","status":"failed","statusDetails":"[Author details with ID 492 was not updated correctly] \nexpected: AuthorDTO(id=492, idBook=94, firstName=null, lastName=null)\n but was: AuthorDTO(id=492, idBook=166, firstName=First Name 492, lastName=Last Name 492)","time":{"start":1745309002680,"stop":1745309004464,"duration":1784}}],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":3,"broken":0,"skipped":0,"passed":0,"unknown":0,"total":3},"items":[{"uid":"5db103cffebe3d0b","reportUrl":"https://alex-sviatenko.github.io/bookstore-api-test/6//#testresult/5db103cffebe3d0b","status":"failed","statusDetails":"[Author details with ID 37 was not updated correctly] \nexpected: AuthorDTO(id=37, idBook=30, firstName=null, lastName=null)\n but was: AuthorDTO(id=37, idBook=14, firstName=First Name 37, lastName=Last Name 37)","time":{"start":1745271914243,"stop":1745271915815,"duration":1572}},{"uid":"7d92b55c833137ac","reportUrl":"https://alex-sviatenko.github.io/bookstore-api-test/6//#testresult/7d92b55c833137ac","status":"failed","statusDetails":"[Author details with ID 187 was not updated correctly] \nexpected: AuthorDTO(id=187, idBook=45, firstName=null, lastName=null)\n but was: AuthorDTO(id=187, idBook=60, firstName=First Name 187, lastName=Last Name 187)","time":{"start":1745271706315,"stop":1745271707390,"duration":1075}}]},"tags":[]},"source":"a8562642b5f6bba6.json","parameterValues":[]}