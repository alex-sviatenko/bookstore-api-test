{"uid":"7d92b55c833137ac","name":"updateAuthorDetailsSuccessfully()","fullName":"com.bookstore.api.tests.AuthorApiTest.updateAuthorDetailsSuccessfully","historyId":"b3ee12dc0af1d2aa43964668038747d","time":{"start":1745271706315,"stop":1745271707390,"duration":1075},"description":"","status":"failed","statusMessage":"[Author details with ID 187 was not updated correctly] \nexpected: AuthorDTO(id=187, idBook=45, firstName=null, lastName=null)\n but was: AuthorDTO(id=187, idBook=60, firstName=First Name 187, lastName=Last Name 187)","statusTrace":"org.opentest4j.AssertionFailedError: [Author details with ID 187 was not updated correctly] \nexpected: AuthorDTO(id=187, idBook=45, firstName=null, lastName=null)\n but was: AuthorDTO(id=187, idBook=60, firstName=First Name 187, lastName=Last Name 187)\n\tat com.bookstore.api.tests.AuthorApiTest.updateAuthorDetailsSuccessfully(AuthorApiTest.java:152)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:580)\n\tat java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)\n\tat java.base/java.util.concurrent.ForkJoinPool$WorkQueue.tryRemoveAndExec(ForkJoinPool.java:1351)\n\tat java.base/java.util.concurrent.ForkJoinTask.awaitDone(ForkJoinTask.java:422)\n\tat java.base/java.util.concurrent.ForkJoinTask.join(ForkJoinTask.java:651)\n\tat java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)\n\tat java.base/java.util.concurrent.ForkJoinPool$WorkQueue.tryRemoveAndExec(ForkJoinPool.java:1351)\n\tat java.base/java.util.concurrent.ForkJoinTask.awaitDone(ForkJoinTask.java:422)\n\tat java.base/java.util.concurrent.ForkJoinTask.join(ForkJoinTask.java:651)\n\tat java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)\n\tat java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1312)\n\tat java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1843)\n\tat java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1808)\n\tat java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:188)\n","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"testStage":{"description":"","status":"failed","statusMessage":"[Author details with ID 187 was not updated correctly] \nexpected: AuthorDTO(id=187, idBook=45, firstName=null, lastName=null)\n but was: AuthorDTO(id=187, idBook=60, firstName=First Name 187, lastName=Last Name 187)","statusTrace":"org.opentest4j.AssertionFailedError: [Author details with ID 187 was not updated correctly] \nexpected: AuthorDTO(id=187, idBook=45, firstName=null, lastName=null)\n but was: AuthorDTO(id=187, idBook=60, firstName=First Name 187, lastName=Last Name 187)\n\tat com.bookstore.api.tests.AuthorApiTest.updateAuthorDetailsSuccessfully(AuthorApiTest.java:152)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:580)\n\tat java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)\n\tat java.base/java.util.concurrent.ForkJoinPool$WorkQueue.tryRemoveAndExec(ForkJoinPool.java:1351)\n\tat java.base/java.util.concurrent.ForkJoinTask.awaitDone(ForkJoinTask.java:422)\n\tat java.base/java.util.concurrent.ForkJoinTask.join(ForkJoinTask.java:651)\n\tat java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)\n\tat java.base/java.util.concurrent.ForkJoinPool$WorkQueue.tryRemoveAndExec(ForkJoinPool.java:1351)\n\tat java.base/java.util.concurrent.ForkJoinTask.awaitDone(ForkJoinTask.java:422)\n\tat java.base/java.util.concurrent.ForkJoinTask.join(ForkJoinTask.java:651)\n\tat java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)\n\tat java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1312)\n\tat java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1843)\n\tat java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1808)\n\tat java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:188)\n","steps":[{"name":"Get authors list","time":{"start":1745271706316,"stop":1745271706772,"duration":456},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Update author details","time":{"start":1745271706772,"stop":1745271707073,"duration":301},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"authorId","value":"187"},{"name":"authorDTO","value":"AuthorDTO(id=187, idBook=45, firstName=null, lastName=null)"}],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},{"name":"Get specific author by ID","time":{"start":1745271707073,"stop":1745271707388,"duration":315},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"authorId","value":"187"}],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":3,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"junit.platform.uniqueid","value":"[engine:junit-jupiter]/[class:com.bookstore.api.tests.AuthorApiTest]/[method:updateAuthorDetailsSuccessfully()]"},{"name":"host","value":"fv-az1369-50"},{"name":"thread","value":"2134@fv-az1369-50.ForkJoinPool-3-worker-1(44)"},{"name":"framework","value":"junit-platform"},{"name":"language","value":"java"},{"name":"package","value":"com.bookstore.api.tests.AuthorApiTest"},{"name":"testClass","value":"com.bookstore.api.tests.AuthorApiTest"},{"name":"testMethod","value":"updateAuthorDetailsSuccessfully"},{"name":"suite","value":"com.bookstore.api.tests.AuthorApiTest"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"a06c38b53f7b7c7c","status":"failed","statusDetails":"[Author details with ID 533 was not updated correctly] \nexpected: AuthorDTO(id=533, idBook=83, firstName=null, lastName=null)\n but was: AuthorDTO(id=533, idBook=175, firstName=First Name 533, lastName=Last Name 533)","time":{"start":1745271703045,"stop":1745271704241,"duration":1196}},{"uid":"aad21d1c137331da","status":"failed","statusDetails":"[Author details with ID 486 was not updated correctly] \nexpected: AuthorDTO(id=486, idBook=3, firstName=null, lastName=null)\n but was: AuthorDTO(id=486, idBook=160, firstName=First Name 486, lastName=Last Name 486)","time":{"start":1745271699271,"stop":1745271700580,"duration":1309}}],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"7d92b55c833137ac.json","parameterValues":[]}